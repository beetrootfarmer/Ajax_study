1. Ajax 란?
- Ajax는 자바스크립트를 이용해 서버와 비동기방식으로 데이터를 주고 받을 수 있는 통신 기능 
- 서버에 요청을 보낼 때 데이터 단위로 보내기 때문에 화면 전체를 리로딩(새로고침) 할 필요 없이
  원하는 부분만 새로고침이 가능하다(XMLHttpRequest 객체를 사용하기 때문에 가능한 부분)
- 전통적인 웹 어플리케이션(Servlet / JSP)에서는 페이지 단위로 서버에 요청을 보내기 때문에
  화면 전체가 새로고침된다
- A(Asynchronous) : 비동기 방식을 사용하겠다는 의미 (비동기 방식 : 요청과 응답의 순서가 상관 없는 방식)
  JAX(Javascript And XML) : 자바스크립트와 XMLHttpRequest객체를 이용해서 화면을 동적으로 구성하겠다는 의미

  2. 전통적인 웹 어플리케이션 (JSP/ Servlet)
  - JSP(Java Server Page) : 웹 페이지를 동적으로 생성하기 위한 서버 프로그램
                            HTML소스에 JAVA 소스를 추가하는 방식
                            JSP에는 HTML 태그를 사용할 수 있기 때문에 화면 구성이 편하고 용이
                            화면구성 소스에 적합하다
 - Servlet : 웹 페이지를 동적으로 생성하기 위한 서버프로그램
             JAVA 소스에 HTML 소스를 추가하는 방식 
             화면 구성을 위한 HTML 소스 추가하는 방식이 복잡하고 어려움
             데이터 처리에 적합하다
 3. MVC (Model View Controller) 패턴
 - Model : 데이터 베이스에 접근하여 데이터 처리를 하는 객체
            데이터베이스에서 추출한 데이터나 입력할 데이터를 가공하는 부분
            화면구성 소스를 완전히 배제한 순수한 JAVA 소스로 구성 가능
            대부분의 업무로직을 Model 영역에 구현함
            Vo(Value Object) = DTO(Data Transfer Object)
            Service(업무로직 구현)
            DAO(Data Access Object) (데이터베이스에 직접적으로 접근)
 - View : 사용자에게 표출되는 화면 영역.
          데이터베이스에서 추출한 데이터들을 사용자에게 표출
          HTML, CSS, Javascript 로 소스가 구성. 가끔 JAVA 소스 추가
          JSP, PHP,ASP, HTML 등
 - Controller : View와 Model를 연결해주는 중간 다리 역할
                Model에서 받아온 데이터를 view에 전달하거나 view에서 사용자가 입력한 데이터를 Model로 전달
                Servlet객체 사용해서 View와 Model 연결
4. XMLHttpRequest(XHR) 객체
 - 서버와 데이터를 주고받기 위해 사용하는 객체
 - 데이터 단위로 서버에 요청하기 때문에 화면의 일부분만 새로고침 가능
 - XHR 객체를 직접사용 : 소스코드 구성이 복잡하고 어려운 단점
   Ajax를 통한 XHR 객체 사용 : 브라우저 -> Ajax -> XHR 객체 -> 서버와 통신
                           XHR 객체를 직접 사용하는 것 보다 소스코드 구성이 간단하여 주로 사용

5. Ajax의 기본형
 |선언| 
 $.ajax({ settings :설정값들 ( 서버에 요청할 url, 메소드 방식, 비동기 여부 등등) });
 |Ajax 호출 후 리턴값|
jqXHR(jquery XMLHTTPRequest) 객체

6. Ajax 설정 값들
- $.ajax({ 
    /*설정 값들 영역*/
    url : 요청할 서비스 url('/list.do'), 
    type : 메소드 타입 지정('POST', 'GET', 'PUT', 'DELETE', 기본값 : 'GET'),
    ansyc : 비동기방식 / 동기방식 지정(true : 비동기방식, false : 동기 방식),
    data : 서버로 전달할 데이터를 입력
           문자열, 배열, 객체 형식 지원
           문자열인 경우 직접 url 인코딩을 해야됨(한글/ 특수문자 유니코드 변경)
           ex ) "keyword="%EC%98%A4&mode=2"
                [  
                    { name : "keyword", Value : "오" },
                    { name : "keyword", Value : "2" }
                ]
                {
                    "keyword" : "오",
                    "mode" : 2
                }
    contentType :  서버로 전달할 데이터의 형식 지정
                   기본 값 : application/x-www-form-urlencoded -> url인코딩된 폼 데이터 형식("keyword="%EC%98%A4&mode=2")
                   ex) application/json -> json 타입의 데이터 형식
    dataType : 서버로부터 응답받은 데이터의 형식 지정(기본값 : 자동 추정)
               xml, json, script, html 등 지정 가능
    statusCode : 서버로부터 전달받은 응답코드 값에 대한 콜백 함수 지정
                 ex) statusCode : {
                     404 : function() {
                        alert("페이지를 찾을 수 없습니다.");
                     },
                     200 : function() {
                         alert("정상 처리되었습니다.");
                     }
                 }
    timeout : 요청  제한시간 지정
              지정한 시간 이내에 응답이 오지 않으면 요청을 중단하고 
              요청시간 초과 되었다는 timeout 오류를 표출(ms단위로 지정)
              ex) timeout : 1900
    headaers : 요청 시 서버로 전달할 헤더 내용 값들 지정
               HTTP 헤더에 포함되는 내용 지정 가능(요청 url, 메소드 타입, 브라우저 정보, 요청권한 등등)
               ex)headers : {Authorization : "token값", Accept : "application/json"}

               /*콜백 함수 영역*/
               beforeSend : function(xhr, settings) {
                   alert("전송 전 실행");
               } : 요청을 서버로 전송하기 전에 실행되는 콜백 함수
                    xhr : XHR 객체
                    settings : ajax 호출 시 지정한 설정 값들
              success : function(data, status, xhr) {
                    alert("전송 전 실행");
                    console.log(data)
              } : 요청이 성공했을 때 실행되는 콜백 함수
                    data : 서버로부터 응답받은 데이터
                    status : 요청 상태 정보를 문자열로 전달받는 매개변수("success")
                    try catch finally : try구문에 해당하는 영역
              error : function(xhr, status, error) {
                  alert("요청 실패!");
                  console.log(error);
              } : 요청이 실패했을 때 실행되는 콜백 함수
                    status : 요청 상태 정보를 문자열로 전달받는 매개변수("timeout", "error","abort" 등)
                    error : 에러 정보를 문자열로 전달받는 매개변수 
                    try catch finally : catch구문에 해당하는 영역
              complete : function(xhr, status) {
                    alert("요청 완료!");
                    }     : 요청이 완료됐을 때 실행되는 콜백 함수
                            요청의 성공/실패 여부와 상관없이 항상 실행되는 콜백 함수 
                    try catch finally : finally구문에 해당하는 영역

}) 
7. Ajax 단축 메소드 
- Ajax 사용하기는 편하지만 설정값들이 많고 복잡하여서 간편하게 사용할 수 있는 단축메소드를 지원
- 단축메소드 종류
    $.get() : GET 방식의 요청을 전송하고 서버로부터 데이터를 받아옴
              $.get(url, successCallback);
              ex)$.get( "/contact/list.do", function(data) {
                  console.log(data);
              });
              $.get(url, data, successCallback);
              ex) $.get( "/contact/list.do",{pageno:1, pagesize:15}, function(data) {
                  console.log(data);
              });
              $.get({settings});
              $.get({
                  url : "contact/list.do",
                  data : {pageno : 1, pagesize : 5},
                  success :function(data) {
                      console.log(data);
                  }
              });
    $.post() : POST방식의 요청을 전송하고 서버로부터 데이터를 받아옴
                $post(url, successCallback);
                $post(url, data, successCallback);
                $post({
                    settings
                });
    $.getJSON() : Get 방식으로 JSON 형식의 인코딩 된 데이터를 로딩
    $.getScript() : Get 방식으로부터 자바스크립트 파일을 로딩 한 후 실행
    load(): 서버로부터 응답받은 데이터를 선택된 HTML 요소의 콘텐츠로 대체
8. jqXHR(Jquery XMLHttpRequest) 객체
    - Jquery에서 제공하는 XHR 객체를 의미
    - 기존의 XHR 객체를 jqXHR 객체 대체해서 사용 가능
    - 기존  XHR 객체에서 처리하던 HTTP 요청 헤더, 타임아웃 등을 처리할 수 있음
    - 추가로 요청 콜백도 처리 가능(ajax에서 사용하던 콜백 함수와 동일한 기능들의 콜백이 존재)
    - jqXHR 콜백 함수
        .done() :$.ajax()의 success 콜백 기능 (요청 성공시 실행)
        ex) jqXHR.done(function(data, status, xhr) {
            console.log(data);
        });
        .fail() : $.ajax()의 error 콜백기능(요청 실패 시에 실행)
        ex) jqXHR.fail(function(xhr, status, error) {
            console.log(status);
        });

        .always() :$.ajax()의 complete 콜백기능(요청 완료 시에 실행, 요청의 성공/실패 여부와 관계 없이 실행)
        ex) jqXHR.always(function(){
			console.log("always");
			});

9. 콜백 지옥
- ajax 여러 개를 순서에 맞게 호출하려면 success 콜백에서 다음 ajax를 호출  
- ajax를 중첩해서 사용하면 소스코드가 복잡해져서 가독성이 떨어지고 예외처리까지 추가될 경우에는 디버깅 또한 어려워지는 단점이 있다
- 이러한 현상을 콜백지옥이라고 한다.

10. Jquery Promise 객체
- Promise 객체는 비동기 방식의 통신에서 발생하는 에러를 해결하기 위해서 사용하는 객체
- 비동기 방식에서는 가끔 서버에서 데이터를 다 받아오기 전에 화면에 표출하려고 하는 문제가 발생하는데 
    이러한 문제를이나 콜백지옥같은 문제들을 해결하는 데 promise 객체를 사용하게 된다
- Promise 객체를 통한 콜백 지옥 해결
    ajax를 호출하고 리턴받는 jqXHR 객체를 통해 새로운 ajax를 추가해주고 
    .then() 메소드를 통해서 다음 ajax를 호출하도록 설정 
